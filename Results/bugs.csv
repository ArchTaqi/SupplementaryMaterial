Bug ID, Bug Description, Conteset ID, Bug Label
H-04, "cancelPromotion is too rigorous", 64, S3
H-08, "Incorrect implementation of arctan in the contract FairSideFormula", 11, S6
H-01, "Anyone can arbitrarily add router liquidity", 19, S2
H-02, "function lockFunds in TopUpActionLibrary can cause serious fund lose. fee and Capped bypass. It’s not calling stakerVault.increaseActionLockedBalance when transfers stakes.", 112, S3
H-01, "Minting and burning synths exposes users to unlimited slippage", 52, S4
H-03, "DoS: claimForAllWindows() May Be Made Unusable By An Attacker", 104, O3
H-03, "Signature replay attacks for different identities (nonce on wrong party)", 38, S3
H-29, "VaderPoolV2.mintFungible exposes users to unlimited slippage", 52, S4
H-05, "Incorrect usage of typecasting in _getAmountsForLiquidity lets an attacker steal funds from the pool", 35, L7
H-08, "MasterChef.sol Users won’t be able to receive the concur rewards", 83, O5
H-04, "WrappedIbbtc and WrappedIbbtcEth contracts do not filter out price feed outliers", 47, C
H-01, "Flash swap call back prior to transferring tokens in indexPool", 29, O5
H-01, "first user can steal everyone else’s tokens", 76, O1
H-01, "Avoidance of Liquidation Via Malicious Oracle", 113, C
H-13, "Admin of the index pool can withdrawCredit() after applyCover() to avoid taking loss for the compensation paid for a certain pool", 71, O1
H-01, "Cannot actually submit evidence", 27, O2
H-03, "A Malicious Treasury Manager Can Burn Treasury Tokens By Setting makerFee To The Amount The Maker Receives", 81, O1
H-04, "NFTXLPStaking Is Subject To A Flash Loan Attack That Can Steal Nearly All Rewards/Fees That Have Accrued For A Particular Vault", 8, O2
H-01, "Anyone Can Arbitrarily Call FSDVesting.updateVestedTokens()", 50, S2
H-01, "[WP-H5] L1Migrator.sol#migrateETH() does not send bridgeMinter’s ETH to L2 causing ETH get frozen in the contract", 73, O2
H-11, "(dex-v1) BasePool.mint() function can be frontrun", 52, S4
H-15, "Incorrect multiplication in _computeSingleOutGivenPoolIn of IndexPool", 29, S6
H-01, "Oracle price does not compound", 102, S6
H-09, "Vault#setController() owner of the Vault contracts can drain funds from the Vault", 71, O1
H-07, "ERC20ConvictionScore._updateConvictionScore uses stale credit score for governanceDelta", 11, S6
H-01, "receiveCollateral() can be called by anyone", 66, S2
H-06, "Incorrect burn address in Vader.sol", 5, C
H-01, "Usage of an incorrect version of Ownbale library can potentially malfunction all onlyOwner functions", 43, O1
H-01, "User can steal all rewards due to checkpoint after transfer", 112, S6
H-07, "TokenHandler.safeTransferIn does not work on non-standard compliant tokens like USDT", 23, L8
H-02, "TimeswapConvenience.sol#borrowGivenDebt() Attacker can increase state.y to an extremely large value with a dust amount of assetOut", 74, S5
H-01, "Unchecked ERC20 transfers can cause lock up", 13, L8
H-01, "Can deposit native token for free and steal funds", 97, S5
H-08, "Vault.withdraw mixes normalized and standard amounts", 30, S6
H-01, "In the case of Single Asset Entry, new liquidity providers will suffer fund loss due to wrong formula of ΔRo", 77, S6
H-02, "2 variables not indexed by marketIndex", 22, O3
H-05, "Mistake while checking LTV to lender accepted LTV", 113, S6
H-01, "Tokens can be burned with no access control", 71, S5
H-02, "Withdrawers can get more value returned than expected with reentrant call", 67, L1
H-01, "Users can lose value in emergency state", 79, S3
H-03, "Reentrancy in settleAuction(): malicious publisher can bypass index timelock mechanism, inject malicious index, and rug the basket", 36, O1
H-05, "Exchange rates from Compound are assumed with 18 decimals", 25, L2
H-10, "ConcentratedLiquidityPool.burn() Wrong implementation", 35, S3
H-09, "treasury is vulnerable to sandwich attack", 42, S1
H-14, "Missing access restriction on lockUnits/unlockUnits", 5, S2
H-04, "Members lose SPARTA tokens in removeLiquiditySingle()", 20, C
H-06, "Users are credited more tokens when paying back debt with registerTradeAndBorrow", 3, S3
H-17, "Understanding the fee growth mechanism (why nearestTick is unsuitable)", 35, C
H-24, "Wrong design/implementation of addLiquidity() allows attacker to steal funds from the liquidity pool", 52, S1
H-01, "Unhandled return value of transfer in transferOut() of Pools.sol", 5, O3
H-05, "Access restrictions on NotionalV1ToNotionalV2.notionalCallback can be bypassed", 23, S2
H-06, "Paying IL protection for all VaderPool pairs allows the reserve to be drained.", 52, S1
H-03, "CompoundToNotionalV2.notionalCallback ERC20 return values not checked", 23, L8
H-01, "User could lose underlying tokens when redeeming from the IdleYieldSource", 14, O5
H-01, "User can forfeit other user rewards", 123, S2
H-01, "Wrong timing of check allows users to withdraw collateral without paying for the debt", 96, C
H-02, "Malicious Users Can Transfer Vault Collateral To Other Accounts To Extract Additional Yield From The Protocol", 80, O1
H-03, "transferNotionalFrom doesn’t check from != to", 39, S5
H-04, "Logic error in fee subtraction", 16, S6
H-02, "auth collision possible", 12, O3
H-01, "no-revert-on-transfer ERC20 tokens can be drained", 122, L8
H-02, "Cooldown and redeem windows can be rendered useless", 81, S5
H-01, "The formula of number of prizes for a degree is wrong", 34, S6
H-10, "Changing NFT contract in the MochiEngine would break the protocol", 42, S5
H-02, "TurboRouter: deposit(), mint(), createSafeAndDeposit() and createSafeAndDepositAndBoost() functions do not work", 92, O3
H-01, "Lack of access control on assertGovernanceApproved can cause funds to be locked", 78, S5
H-06, "IndexPool:  Poor conversion from Balancer V1’s corresponding functions", 29, O5
H-02, "unstake should update exchange rates first", 43, S6
H-03, "Locked funds from tokenization are credited twice to user leading to protocol fund loss", 11, S3
H-05, "hybrid pool uses wrong non_optimal_mint_fee", 29, C
H-20, "Early user can break addLiquidity", 52, L3
H-01, "veCVXStrategy.manualRebalance has wrong logic", 31, S3
H-03, "Repeated Calls to Shelter.withdraw Can Drain All Funds in Shelter", 83, C
H-05, "Oracle returns an improperly scaled USDV/VADER price", 70, S6
H-02, "UberOwner has too much power", 26, O1
H-01, "MEV miner can mint larger than expected UDT total supply", 54, S1
H-04, "function tokenByIndex treats last index as invalid", 6, C
H-03, "Users could shift tokens on Staker with more than he has staked", 22, S5
H-01, "Timelock can be bypassed", 59, O1
H-01, "OpenLevV1Lib’s and LPool’s doTransferOut functions call native payable.transfer, which can be unusable for smart contract calls", 72, L4
H-01, "NFT owner can create multiple auctions", 94, S2
H-01, "borrow must accrueInterest first", 45, S3
H-28, "Incorrect Price Consultation Results", 52, S6
H-03, "Router liquidity on receiving chain can be double-dipped by the user", 19, S3
H-03, "Result of transfer / transferFrom not checked", 20, L8
H-00, "ERC-721 Enumerable Spec mismatch for index of tokenByIndex() function", 6, S6
H-11, "totalLiquidityWeight Is Updated When Adding New Token Pairs Which Skews Price Data For getVaderPrice and getUSDVPrice", 70, C
H-07, "Liquidation will never work with non-zero discounts", 42, L7
H-05, "USDMPegRecovery Risk of fund locked, due to discrepancy between curveLP token value against internal contract math", 83, S6
H-02, "Wrong implementation of performanceFee can cause users to lose 50% to 100% of their funds", 58, S6
H-02, "Total Supply is not guaranteed and is not deterministic.", 131, S5
H-02, "Wrong token allocation computation for token decimals != 18 if floor price not reached", 79, S6
H-08, "IndexTemplate.sol#compensate() will most certainly fail", 71, L2
H-08, "Wrong inequality when adding/removing liquidity in current price range", 35, S6
H-11, "Unable To Call emergencyWithdraw ETH in NoYield Contract", 61, O5
H-01, "User can call liquidate() and steal all collateral due to arbitrary router call", 115, L9
H-06, "Referrer can drain ReferralFeePoolV0", 42, O1
H-10, "IndexPool initial LP supply computation is wrong", 29, S6
H-01, "createPromotion() Lack of input validation for _epochDuration can potentially freeze promotion creator’s funds", 64, O4
H-20, "Vault Weight accounting is wrong for withdrawals", 5, S6
H-01, "YaxisVaultAdapter.sol#withdraw() will most certainly fail", 56, L2
H-03, "Reward token not correctly recovered", 62, S6
H-16, "Funds in the pool could be stolen by exploiting flashSwap in HybridPool", 29, S3
H-04, "Proposals can be cancelled", 5, S2
H-01, "Wrong reward token calculation in MasterChef contract", 83, S6
H-05, "backdoor in withdrawRedundant", 71, O1
H-09, "deposit in ConvexStakingWrapper will most certainly revert", 83, O5
H-10, "calculate Loss is vulnerable to flashloan attack", 52, S1
H-09, "Incorrect initialization gives IL protection of only 1 second instead of 100 days in Router.sol", 5, O5
H-02, "wrong minting amount", 78, S6
H-06, "borrow() function has state updates after a callback to msg.sender", 74, C
H-04, "registerAsset() can overwrite _assetClass value", 42, S4
H-04, "Unbounded loop in _removeNft could lead to a griefing/DOS attack", 10, O3
H-07, "Wrong calcAsymmetricShare calculation", 5, S6
H-01, "implicit underflows", 17, L7
H-22, "Users may unintentionally remove liquidity under a phishing attack.", 5, O6
H-04, "Inconsistent usage of applyInterest", 3, O3
H-03, "Last person to withdraw his tokens might not be able to do this, in Crowdsale (edge case)", 28, C
H-02, "StakedCitadel: wrong setupVesting function name", 110, O5
H-19, "Governance veto can be bypassed", 52, S5
H-02, "LiquidityProviders.sol The share price of the LP can be manipulated and making future liquidityProviders unable to removeLiquidity()", 97, L7
H-23, "Anyone can curate pools and steal rewards", 5, S2
H-15, "VaderRouter._swap performs wrong swap", 52, S6
H-16, "VaderRouter.calculateOutGivenIn calculates wrong swap", 52, S6
H-08, "Unable to claim vesting due to unbounded timelock loop", 51, S2
H-02, "Can access cards of other markets", 13, S2
H-08, "Funds cannot be withdrawn in CoreCollection.withdraw", 104, L8
H-02, "All swapping functions lack checks for returned tokens", 103, C
H-02, "Backdated _startTimestamp can lead to loss of funds", 64, O4
H-22, "mintSynth() and burnSynth() can be front run", 52, S4
H-31, "Unused slippage params", 52, O3
H-01, "Signature malleability of EVM’s ecrecover in verify()", 6, LA
H-04, "Reentrancy issue in yVault.deposit", 107, L1
H-02, "denial of service", 89, O3
H-09, "USDV.sol Mint and Burn Amounts Are Incorrect", 70, S6
H-06, "STORAGE COLLISION BETWEEN PROXY AND IMPLEMENTATION (LACK EIP 1967)", 104, L5
H-02, "Tokens can be stolen when depositToken == rewardToken", 62, S2
H-01, "Update initializer modifier to prevent reentrancy during initialization", 89, L1
H-01, "Unsafe handling of underlying tokens", 39, L8
H-01, "ERC20 transferFrom return values not checked", 104, L8
H-11, "ConvexStakingWrapper._calcRewardIntegral() Can Be Manipulated To Steal Tokens From Other Pools", 83, S2
H-06, "SynthVault rewards can be gamed", 20, S3
H-02, "activeTransactionBlocks are vulnerable to DDoS attacks", 19, O3
H-01, "Single under-funded protocol can break paying off debt", 21, O6
H-10, "Anyone can list anchors / curate tokens", 5, O3
H-02, "The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards", 75, L1
H-01, "Steal tokens from TempusController", 37, C
H-07, "IndexPool.mint The first liquidity provider is forced to supply assets in the same amount, which may cause a significant amount of fund loss", 29, L3
H-03, "Freeze The Bridge Via Large ERC20 Names/Symbols/Denoms", 27, O2
H-09, "VaderPoolV2 incorrectly calculates the amount of IL protection to send to LPs", 52, S6
H-06, "Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens", 61, S5
H-11, "Swap token can be traded as fake base token", 5, S5
H-03, "VADER contains a Fee-On-Transfer", 52, S3
H-10, "Hijack token pool by burning liquidity token", 20, S6
H-02, "SushiToken transfers are broken due to wrong delegates accounting on transfers", 28, -
H-01, "Use of tokenB’s price instead of tokenA in determining account health will lead to protocol mis-accounting and insolvency", 32, S6
H-08, "Rewards cannot be withdrawn", 3, S2
H-04, "Large Validator Sets/Rapid Validator Set Updates May Freeze the Bridge or Relayers", 27, O2
H-01, "OverlayV1UniswapV3Market computes wrong market liquidity", 49, S6
H-03, "Customers cannot be topUp()ed a second time", 112, O3
H-08, "ts.tokens sometimes calculated incorrectly", 62, S6
H-03, "Wrong formula when add fee incentivePool can lead to loss of funds.", 97, S6
H-06, "ConcentratedLiquidityPosition.sol#collect() Users may get double the amount of yield when they call collect() before burn()", 35, S5
H-05, "Insurance slippage reimbursement can be used to steal insurance fund", 16, S2
H-14, "Anyone Can Arbitrarily Mint Fungible Tokens In VaderPoolV2.mintFungible()", 52, S2
H-08, "Anyone can extend withdraw wait period by depositing zero collateral", 42, S5
H-02, "Arbitrary Transfer of Unowned NFTs", 6, S2
H-03, "Manipulation of the Y State Results in Interest Rate Manipulation", 74, S5
H-07, "ConcentratedLiquidityPosition.sol#burn() Wrong implementation allows attackers to steal yield", 35, S4
H-01, "Contract BasicSale is missing an approve(address(vestLock), 2**256-1) call", 51, O5
H-05, "Wrong liquidation logic", 3, S6
H-10, "previousPrices Is Never Updated Upon Syncing Token Price", 70, S3
H-03, "Beneficiary cant get fairSideConviction NFT unless they only claim once, and only after it’s fully vested", 50, S3
H-17, "TWAPOracle might register with wrong token order", 52, O5
H-01, "Missing overflow check in flashLoan", 8, O3
H-09, "range fee growth underflow", 35, L7
H-12, "feePool is vulnerable to sandwich attack.", 42, S1
H-01, "Rounding Issues In Certain Functions", 124, C
H-03, "StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination", 110, O1
H-01, "Copy your own portfolio to keep earning royalties", 53, S2
H-07, "VaderReserve does not support paying IL protection out to more than one address, resulting in locked funds", 52, O5
H-05, "NFT can be minted for free after sale ended", 6, S4
H-07, "SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues", 61, S3
H-09, "arbitrary synth mint/burn from pool", 20, S2
H-11, "Misuse of AMM model on minting Synth (resubmit to add more detail)", 20, S6
H-01, "UniswapConfig getters return wrong token config if token config does not exist", 7, O5
H-06, "Wrong price scale for GasOracle", 16, O3
H-16, "Possible attacks on Seconds * Liquidity calculation", 35, O3
H-07, "Business logic bug in __abdicate() function - 2 Bugs", 62, S3
H-01, "Prevent execution with invalid signatures", 38, O1
H-01, "Minter.sol#startInflation() can be bypassed.", 131, L3
H-05, "Aave’s share tokens are rebasing breaking current strategy code", 61, O6
H-08, "Possibility to drain SavingsAccount contract assets", 61, S2
H-04, "Expired transfers will lock user funds on the sending chain", 19, O2
H-06, "Rewards can be claimed multiple times", 64, S3
H-03, "Missing DAO functionality to call changeDAO() function in Vader.sol", 5, O5
H-02, "Wrong calculation of erc20Delta and ethDelta", 44, S6
H-12, "ConcentratedLiquidityPool: secondsPerLiquidity should be modified whenever pool liquidity changes", 35, S3
H-18, "Attacker can claim more IL by manipulating pool price then removeLiquidity", 52, S1
H-25, "Wrong design of swap() results in unexpected and unfavorable outputs", 52, S6
H-06, "the first depositor to a pool can drain all users", 71, O1
H-01, "Re-entrancy bug allows inflating balance", 3, L1
H-02, "LendingPair.liquidateAccount does not accrue and update cumulativeInterestRate", 18, S3
H-04, "TwapOracle doesn’t calculate VADER:USDV exchange rate correctly", 52, S6
H-01, "Vault fails to track debt correctly that leads to bad debt", 42, S6
H-02, "FSDVesting: Claiming tributes should call FSD token’s corresponding functions", 50, C
H-01, "YearnVault.sol#pull() will most certainly fail", 58, O5
H-03, "Price feed can be manipulated", 3, O3
H-23, "Synth tokens can get over-minted", 52, S3
H-03, "MixinTransfer.sol#transferFrom Wrong implementation can potentially allows attackers to reverse transfer and cause fund loss to the users", 54, S3
H-02, "Inefficiency in the Dutch Auction due to lower duration", 122, C
H-08, "StrategyPUSDConvex.balanceOfJPEG uses incorrect function signature while calling extraReward.earned, causing the function to unexpectedly revert everytime", 107, O5
H-02, "CDP.sol update overwrites user’s credit on every positive increment", 56, S3
H-09, "Potential DOS in Contracts Inheriting UUPSUpgradeable.sol", 23, O3
H-02, "Can not update target price", 51, L2
H-14, "Incorrect usage of _pow in _computeSingleOutGivenPoolIn of IndexPool", 29, S6
H-02, "set cap breaks vault’s Balance", 30, L7
H-01, "TimeswapPair.sol#borrow() Improper implementation allows attacker to increase pool.state.z to a large value", 74, S5
H-02, "Mint spread collateral-less and conjuring collateral claims out of thin air with implicit arithmetic rounding and flawed int to uint conversion", 98, S6
H-02, "The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees", 69, L8
H-04, "Improper implementation of arbitraryCall() allows protocol gov to steal funds from users’ wallets", 62, S2
H-02, "NFT transfer approvals are not removed and cannot be revoked thus leading to loss of NFT tokens", 10, C
H-07, "Controller: Strategy migration will fail", 107, O1
H-04, "Initial pool deposit can be stolen", 71, S4
H-03, "Oracle doesn’t calculate USDV/VADER price correctly", 70, S6
H-02, "Splitter: Anyone can call incrementWindow to steal the tokens in the contract", 104, S2
H-10, "recoverTokens doesn’t work when isSale is true", 62, S3
H-01, "findNewOwner edgecase", 26, C
H-05, "Synth realise is vulnerable to flash loan attacks", 20, O2
H-02, "Miners Can Re-Roll the VRF Output to Game the Protocol", 34, O1
H-01, "copy paste error in _batchConfirmOutstandingPendingActions", 22, O5
H-03, "getRandomTokenIdFromFund yields wrong probabilities for ERC1155", 8, S6
H-13, "Flash loan manipulation on getPoolShareWeight of Utils", 20, O2
H-04, "ERC20ConvictionScore’s governanceDelta should be subtracted when user is not a governor anymore", 11, S4
H-02, "redeemToken can fail for certain tokens", 24, L8
H-03, "Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool", 67, S1
H-02, "uint(-1) index for not found", 7, O5
H-06, "Ideal balance is not calculated correctly when providing imbalanced liquidity", 51, S6
H-02, "FeePoolV0.sol#distributeMochi() will unexpectedly flush treasuryShare, causing the protocol fee cannot be properly accounted for and collected", 42, S4
H-03, "Withdrawal delay can be circumvented", 100, S5
H-07, "Shelter claimed mapping is set with _to address and not msg.sender", 83, S2
H-01, "Hard-coded slippage may freeze user funds during market turbulence", 125, O4
H-12, "absolute difference is not calculated properly when a > b in MathUtils", 29, S6
H-01, "Malicious Users Can Duplicate Protocol Earned Yield By Transferring wCVX Tokens To Another Account", 80, S5
H-01, "CompositeMultiOracle returns wrong decimals for prices?", 25, L2
H-05, "AuctionEschapeHatch.sol#exitEarly updates state of the auction wrongly", 59, C
H-01, "Duplication of Balance", 12, S3
H-08, "HybridPool’s reserve is converted to “amount” twice", 29, S6
H-01, "onlyOwnerOrAssetManager can swap Yield Source in SwappableYieldSource at any time, immediately rugging all funds from old yield source", 24, O1
H-30, "Newly Registered Assets Skew Consultation Results", 52, S4
H-05, "Claim airdrop repeatedly", 51, S3
H-32, "Covering impermanent loss allows profiting off asymmetric liquidity provision at expense of reserve holdings", 52, C
H-01, "Strategy Migration May Leave Tokens in the Old Strategy Impacting Share Calculations", 100, O1
H-09, "Bad debts should not continue to accrue interest", 107, O3
H-02, "Swivel: Taker is charged fees twice in exitVaultFillingVaultInitiate", 39, S6
H-02, "Typo in PoolTemplate unlock function results in user being able to unlock multiple times", 71, O5
H-03, "SwapUtils.sol Wrong implementation", 51, S3
H-04, "CoreCollection can be reinitialized", 104, L3
H-03, "ConcentratedLiquidityPoolManager’s incentives can be stolen", 35, S3
H-04, "deposit() function is open to reentrancy attacks", 67, L1
H-01, "Controller.setCap sets wrong vault balance", 30, S6
H-03, "Borrower can be their own lender and steal funds from buyout due to reentrancy", 106, L1
H-03, "LendingPair.liquidateAccount fails if tokens are lent out", 18, S4
H-12, "Using single total native reserve variable for synth and non-synth reserves of VaderPoolV2 can lead to losses for synth holders", 70, C
H-03, "getAuctionCore function returns wrong values out of order", 59, O5
H-01, "setGuardian() Wrong implementation", 57, O5
H-02, "ERC20Rewards returns wrong rewards if no tokens initially exist", 25, O3
H-01, "Unsafe cast in ConcentratedLiquidityPool.burn leads to attack", 35, L7
H-07, "Vault.balance() mixes normalized and standard amounts", 30, S6
H-03, "An offer made after auction end can be stolen by an auction winner", 94, S4
H-01, "VaderPoolV2 minting synths & fungibles can be frontrun", 70, S4
H-05, "sponsor() function in open to reentrancy attacks", 67, L1
H-01, "Bonding mechanism allows malicious user to DOS auctions", 41, S4
H-09, "Unsafe cast in IndexPool mint leads to attack", 29, L7
H-02, "Wrong usage of positionId in ConcentratedLiquidityPoolManager", 35, S2
H-03, "anyone can call function sponsor", 13, S2
H-25, "Incorrect initialization causes VADER emission rate of 1 second instead of 1 day in Vader.sol", 5, O5
H-01, "ERC4626 mint uses wrong amount", 92, S6
H-02, "Use of incorrect index leads to incorrect updation of funding rates", 16, S6
H-05, "IdleYieldSource doesn’t use mantissa calculations", 14, S6
H-18, "Vault rewards can be gamed", 5, O3
H-02, "Missing fromToken != toToken check", 3, O3
H-04, "Access restrictions on CompoundToNotionalV2.notionalCallback can be bypassed", 23, S2
H-02, "DAO proposals can be executed by anyone due to vulnerable TimelockController", 23, S4
H-07, "Missing slippage checks", 20, O3
H-03, "WrappedIbbtcEth contract will use stalled price for mint/burn if updatePricePerShare wasn’t run properly", 47, S3
H-07, "LP pricing formula is vulnerable to flashloan manipulation", 78, S1
H-11, "treasuryShare is Overwritten in FeePoolV0._shareMochi()", 42, S3
H-13, "Burning does not update reserves", 35, S3
H-07, "Duplicate NFTs Can Be Minted if payableToken Has a Callback Attached to it", 104, L1
H-07, "Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users’ wallet balances", 71, S5
H-01, "Conviction scoring fails to initialize and bootstrap", 11, C
H-03, "IndexPool pow overflows when weightRatio > 10.", 29, L7
H-03, "Wrong implementation of EIP712MetaTransaction", 98, L3
H-03, "Double transfer in the transferAndCall function of ERC677", 78, C
H-17, "Transfer fee is burned on wrong accounts", 5, S2
H-06, "Incorrect type conversion in the contract ABC makes users unable to burn FSD tokens", 11, L7
H-01, "Incorrect strike price displayed in name/symbol of qToken", 98, C
H-02, "Flash attack mitigation does not work as intended in USDV.sol", 5, L3
H-01, "StakedCitadel doesn’t use correct balance for internal accounting", 110, S6
H-02, "Liquidation can be escaped by depositing a Uni v3 position with 0 liquidity", 32, S3
H-03, "denial of service", 61, O5
H-01, "makePayment() Lack of access control allows malicious lender to retrieve a large portion of the funds earlier, making the borrower suffer fund loss", 55, S2
H-06, "Creating rewardTokens without streaming depositTokens", 62, S3
H-01, "SynthVault withdraw forfeits rewards", 20, O6
H-13, "Overflow in the mint function of IndexPool causes LPs’ funds to be stolen", 29, L7
H-03, "BadgerYieldSource balanceOfToken share calculation seems wrong", 14, S6
H-09, "removeToken would break the vault/protocol.", 30, O1
H-01, "A previously timelocked NFT token becomes permanently stuck in vault if it’s ever moved back into the vault", 10, S2
H-05, "yVaultLPFarming: No guarantee JPEG currentBalance > previousBalance", 107, O1
H-05, "debts calculation is not accurate", 42, S5
H-04, "Important state updates are made after the callback in the mint() function", 74, C
H-01, "LenderPool: Principal withdrawable is incorrectly calculated if start() is invoked with non-zero start fee", 101, S6
H-21, "Anyone Can Avoid All Vether Transfer Fees By Adding Their Address to the Vether ExcludedAddresses List.", 5, S2
H-04, "Controller does not raise an error when there’s insufficient liquidity", 30, C
H-04, "Lender is able to seize the collateral by changing the loan parameters", 113, S4
H-04, "withdraw timelock can be circumvented", 14, O3
H-04, "sortVaultsByDelta doesn’t work as expected", 17, L3
H-15, "ConcentratedLiquidityPool: initialPrice should be checked to be within allowable range", 35, L7
H-04, "ConvexStakingWrapper, StakingRewards Wrong implementation will send concur rewards to the wrong receiver", 83, O5
H-01, "forceUnsponsor() may open a window for attackers to manipulate the _totalShares and freeze users’ funds at a certain deposit amount", 67, C
H-03, "[WP-H0] Fake balances can be created for not-yet-existing ERC20 tokens, which allows attackers to set traps to steal funds from future users", 122, O3
H-01, "The design of wibBTC is not fully compatible with the current Curve StableSwap pool", 47, C
H-01, "PostAuctionLauncher.sol#finalize() Adding liquidity to an existing pool may allows the attacker to steal most of the tokens", 28, S2
H-12, "getAddedAmount can return wrong results", 5, O3
H-03, "Malicious owner can drain the market at any time using SafetyWithdraw", 16, O1
H-04, "IndexPool’s INIT_POOL_SUPPLY is not fair.", 29, O1
H-03, "Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts", 71, O1
H-09, "PriceOracle Does Not Filter Price Feed Outliers", 61, O3
H-01, "Self transfer can lead to unlimited mint", 23, C
H-03, "Approval for NFT transfers is not removed after transfer", 10, S2
H-09, "lastUpdatedDay not initialized", 3, L4
H-02, "Masterchef: Improper handling of deposit fee", 83, S6
H-05, "Withdrawable.withdraw does not decrease pendingWithdrawals", 11, C
H-13, "4 Synths can be minted with fake base token", 5, S5
H-04, "Logic error in burnFlashGovernanceAsset can cause locked assets to be stolen", 78, S2
H-27, "Unrestricted vestFor", 52, S2
H-19, "Vault rewards last claim time not always initialized", 5, O3
H-08, "USDV and VADER rate can be wrong", 52, L2
H-02, "YearnV2YieldSource wrong subtraction in withdraw", 14, S6
H-04, "Overflow in the mint function of ConcentratedLiquidityPool causes LPs’ funds to be stolen", 35, L7
H-11, "ConcentratedLiquidityPool: incorrect feeGrowthGlobal accounting when crossing ticks", 35, S6
H-05, "Flash loans can affect governance voting in DAO.sol", 5, O2
H-02, "System could be wrapped and made useless without contract whitelisting", 105, O3
H-01, "buyAndSwap1155WETH() function may cause loss of user assets", 69, O5
H-05, "Centralisation RIsk: Owner Of RoyaltyVault Can Take All Funds", 104, O1
H-06, "ConvexStakingWrapper.sol#_calcRewardIntegral Wrong implementation can disrupt rewards calculation and distribution", 83, C
H-06, "earn results in decreasing share price", 30, O1
H-05, "Malicious tickets can lead to the loss of all tokens", 64, S2
H-07, "customPrecisionMultipliers would be rounded to zero and break the pool", 51, L2
H-13, "Anyone Can Arbitrarily Mint Synthetic Assets In VaderPoolV2.mintSynth()", 52, S2
H-13, "Tokens Can Be Stolen By Frontrunning VestedRewardPool.vest() and VestedRewardPool.lock()", 42, S4
H-10, "ConvexStakingWrapper.exitShelter() Will Lock LP Tokens, Preventing Users From Withdrawing", 83, O1
H-06, "TokenHandler.safeTransferOut does not work on non-standard compliant tokens like USDT", 23, L8
H-02, "Unable to remove liquidity in Recovery Mode", 59, L2
H-03, "Incorrect use of operator leads to arbitrary minting of GVT tokens", 17, O5
H-02, "Redemption value of synths can be manipulated to drain VaderPool of all native assets", 52, S1
H-03, "YieldMath.sol / Log2: >= or > ?", 12, S6
H-01, "Re-entrancy in settleAuction allow stealing all funds", 36, L1
H-04, "AaveVault does not update TVL on deposit/withdraw", 58, S3
H-01, "Malicious early user/attacker can malfunction the contract and even freeze users’ funds in edge cases", 75, O1
H-03, "Continue claiming reqrds after numberOfEpochs are over", 64, S3
H-02, "Wrong design/implementation of freeTrial allows attacker to steal funds from the protocol", 54, S3
H-04, "AuctionBurnReserveSkew.getPegDeltaFrequency() Wrong implementation can result in an improper amount of excess Liquidity Extension balance to be used at the end of an auction", 59, S6
H-03, "Critical Oracle Manipulation Risk by Lender", 113, S1
H-07, "account.holdsToken is never set", 3, L3
H-10, "A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts", 71, O1
H-03, "InsuranceFund depositors can be priced out & deposits can be stolen", 89, O1
H-15, "Wrong slippage protection on Token -> Token trades", 5, S6
H-04, "Rewards accumulated can stay constant and often not increment", 25, S3
H-05, "Approval is not reset if the call to IFulfillHelper fails", 19, O2
H-01, "Treasury cannot claim COMP tokens & COMP tokens are stuck", 81, S2
H-02, "currentLoanOwner can manipulate loanInfo when any lenders try to buyout", 106, L1
H-08, "DOS by Frontrunning NoteERC20 initialize() Function", 23, S4
H-09, "addInvestor() Does Not Check Availability of investors_supply", 51, S3
H-01, "DropPerSecond is not updated homogeneously, the rewards emission can be much higher than expected in some cases", 105, L2
H-01, "Wrong shortfall calculation", 60, S6
H-03, "Beebots.TradeValid() Will Erroneously Return True When Maker Is Set To Address(0) and makerIds Are Set To The TokenIds of Unminted Beebot NFTs", 6, C
H-01, "Wrong calculation of excess depositToken allows stream creator to retrieve depositTokenFlashloanFeeAmount, which may cause fund loss to users", 62, S6
H-01, "Reward computation is wrong", 18, S6
H-03, "No safety check in addToken", 30, O1
H-04, "Vader TWAP averages wrong", 70, S6
H-02, "Pool.sol & Synth.sol: Failing Max Value Allowance", 20, L7
H-11, "ConstantProductPool.burnSingle swap amount computations should use balance", 29, S6
H-10, "Wrong implementation of NoYield.sol#emergencyWithdraw()", 61, O5
H-05, "Possible incentive theft through the arbitraryCall() function", 62, O3
H-02, "Locked funds are debited twice from the user during tokenization leading to fund loss", 11, S3
H-01, "Arbitrary contract call allows attackers to steal ERC20 from users’ wallets", 44, L6
H-02, "distribute DoS on missing receiveRewards implementation", 8, O3
H-04, "Yearn token <> shares conversion decimal issue", 61, L2
H-08, "Wrong liquidity units calculation", 5, S6
H-01, "Reliance on lifiData.receivingAssetId can cause loss of funds", 103, S2
H-06, "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.", 70, S1
H-03, "setYieldSource leads to temporary wrong results", 24, S3
H-01, "Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded", 109, O2
H-12, "IndexTemplate.sol Wrong implementation allows lp of the index pool to resume a locked PayingOut pool and escape the responsibility for the compensation", 71, S5
H-16, "Tokens can be stolen through transferTo", 5, O3
H-34, "Incorrect Accrual Of sumNative and sumUSD In Producing Consultation Results", 52, S6
H-08, "Reserve does not properly apply prices of VADER and USDV tokens", 70, S1
H-02, "Index Pool always swap to Zero", 29, O5
H-02, "First depositor can break minting of shares", 100, O1
H-09, "ERC20 tokens with no return value will fail to transfer", 104, L8
H-01, "In CreditLine#_borrowTokensToLiquidate, oracle is used wrong way", 61, O5
H-08, "Dividend reward can be gamed", 20, S3
H-10, "Liquidity token value can be manipulated", 23, S1
H-03, "Update initializer modifier to prevent reentrancy during initialization", 107, L1
H-07, "Redemption value of synths can be manipulated to drain VaderPoolV2 of all native assets in the associated pair", 70, S1
H-11, "Impossible to call withdrawReward fails due to run out of gas", 3, L4
H-04, "SwappableYieldSource: Missing same deposit token check in transferFunds()", 24, C
H-02, "QuickAccManager.sol#cancel() Wrong hashTx makes it impossible to cancel a scheduled transaction", 38, O5
H-02, "Buoy3Pool.safetyCheck is not precise and has some assumptions", 17, L2
H-02, "The return value success of the get function of the INFTOracle interface is not checked", 113, S5
H-02, "Basket.sol#auctionBurn() A failed auction will freeze part of the funds", 36, S3
H-02, "Fund loss or theft by attacker with creating a flash loan and setting SuperVault as receiver so executeOperation() will be get called by lendingPool but with attackers specified params", 115, C
H-02, "Transferring quoteToken to the exchange pool contract will cause future liquidity providers to lose funds", 77, S5
H-02, "The check for value transfer success is made after the return statement in _withdrawFromYieldPool of LidoVault", 125, C
H-04, "return value of 0 from ecrecover not checked", 39, C
H-01, "Can force borrower to pay huge interest", 106, O6
H-02, "Creators can steal sale revenue from owners’ sales", 94, S4
H-04, "EIP712MetaTransaction.executeMetaTransaction() failed txs are open to replay attacks", 98, O3
H-04, "QuickAccManager Smart Contract signature verification can be exploited", 38, C
H-02, "Wrong returns of SavingsAccountUtil.depositFromSavingsAccount() can cause fund loss", 61, O5
H-06, "Setting new controller can break YVaultLPFarming", 107, O1
H-21, "Lack of access control allow attacker to mintFungible() and mintSynth() with other user’s wallet balance", 52, S2
H-06, "Loss Of Flash Governance Tokens If They Are Not Withdrawn Before The Next Request", 78, S3
H-02, "[Bug] A critical bug in bps function", 21, C
H-09, "DOS while dealing with erc20 when value(i.e amount*decimals)  is high but less than type(uint112).max", 62, L7
H-10, "An attacker can steal funds from multi-token vaults", 30, S6
H-01, "IndexLogic: An attacker can mint tokens for himself using assets deposited by other users", 90, S4
H-01, "A malicious early user/attacker can manipulate the vault’s pricePerShare to take an unfair share of future users’ deposits", 114, O1
H-04, "Anyone can affect deposits of any user and turn the owner of the token", 13, S2
H-05, "In the lend() function state updates are made after the callback", 74, C
H-03, "A vault can be locked from MarketplaceZap and StakingZap", 69, S5
H-02, "PooledCreditLine: termination likely fails because _principleWithdrawable is treated as shares", 101, S6
H-03, "UniV3Vault.sol#collectEarnings() can be front run", 58, S4
H-01, "Wrong trading pricing calculations", 16, S6
H-26, "All user assets which are approved to VaderPoolV2 may be stolen", 52, S2
H-14, "Denial of service", 70, O3
H-04, "Approvals not cleared after key transfer", 54, S3
H-14, "ConcentratedLiquidityPool: rangeFeeGrowth and secondsPerLiquidity math needs to be unchecked", 35, L4
H-02, "OZ ERC1155Supply vulnerability", 49, L1
H-33, "Mixing different types of LP shares can lead to losses for Synth holders", 52, S3
H-05, "Flash loan price manipulation in purchasePyroFlan()", 78, S1
H-02, "Wrong implementation of CreditLimitByMedian.sol#getLockedAmount() makes it unable to unlock lockedAmount in CreditLimitByMedian model", 45, S6
H-12, "wrong calcLiquidityHoldings that leads to dead fund in the Pool", 20, S3
H-07, "pay() function has callback to msg.sender before important state updates", 74, C
H-05, "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.", 52, O1
H-02, "Existing user’s locked JPEG could be overwritten by new user, causing permanent loss of JPEG funds", 107, S2
H-02, "Approved spender can spend too many tokens", 47, S3
H-05, "Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities.", 30, O1
H-04, "Swaps are not split when trade crosses target price", 51, S3
H-11, "PoolTemplate.sol#resume() Wrong implementation of resume() will compensate overmuch redeem amount from index pools", 71, S6
H-02, "VaderPoolV2 owner can steal all user assets which are approved VaderPoolV2", 70, O1
H-04, "Deleting nft Info can cause users’ nft.unpaidRewards to be permanently erased", 97, C
H-03, "ReferralFeePoolV0.sol#claimRewardAsMochi() Array out of bound exception", 42, L7
H-12, "Attacker can get extremely cheap synth by front-running create Pool", 52, S4
H-07, "Contract does not work with fee-on transfer tokens", 64, C
H-05, "Users will lose a majority or even all of the rewards when the amount of total shares is too large, due to precision loss", 97, L2
H-02, "Yeti token rebase checks the additional token amount incorrectly", 66, O6
H-01, "yVault: First depositor can break minting of shares", 107, O1
H-01, "Wrong fee calculation after totalSupply was 0", 65, S3
H-04, "ERC20ConvictionScore._writeCheckpoint` does not write to storage on same block", 50, L5
H-02, "withdrawTo Does Not Sync Before Checking A Position’s Margin Requirements", 60, S1
H-02, "UniswapV2PriceOracle.sol currentCumulativePrices() will revert when priceCumulative addition overflow", 90, L7
H-13, "Council veto protection does not work", 70, C
H-02, "Freeze Bridge via Non-UTF8 Token Name/Symbol/Denom", 27, O2
H-03, "ERC20Rewards breaks when setting a different token", 25, O1
